<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LBCH&#39;Blog</title>
  
  <subtitle>属于LBCH的技术分享博客网站</subtitle>
  <link href="http://liangboch.github.io/atom.xml" rel="self"/>
  
  <link href="http://liangboch.github.io/"/>
  <updated>2024-07-01T15:22:45.759Z</updated>
  <id>http://liangboch.github.io/</id>
  
  <author>
    <name>LBCH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础</title>
    <link href="http://liangboch.github.io/2024/06/29/Python%E5%9F%BA%E7%A1%80/"/>
    <id>http://liangboch.github.io/2024/06/29/Python%E5%9F%BA%E7%A1%80/</id>
    <published>2024-06-28T16:01:14.547Z</published>
    <updated>2024-07-01T15:22:45.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-输入和输出"><a href="#1-输入和输出" class="headerlink" title="1. 输入和输出"></a>1. 输入和输出</h1><ul><li>输入</li></ul><p>需要使用到input关键字, 从键盘上获取信息赋值给一个容器</p><p>代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名 = <span class="built_in">input</span>(提示语)</span><br><span class="line"><span class="built_in">print</span>(变量名)</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><p>可以在控制台显示变量的值或文字, 数字等信息</p><p>代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 = 变量值</span><br><span class="line"><span class="built_in">print</span>(变量名)</span><br><span class="line"><span class="built_in">print</span>(要输出的内容)</span><br></pre></td></tr></table></figure><h1 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h1><p>为代码加上可以不被程序允许的解释, 方便自己或其他程序员阅读</p><ul><li>单行注释 <code># 描述信息</code></li></ul><p>​通常放在一行代码的上方, 或者一条语句的末尾, 对该行代码说明</p><ul><li>多行代码 <code>&#39;&#39;&#39;描述信息&#39;&#39;&#39;</code></li></ul><p>​通常放在一段代码上方, 对该段代码做整体解释</p><h1 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h1><p>注意:Python中只有变量, 没有常量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-输入和输出&quot;&gt;&lt;a href=&quot;#1-输入和输出&quot; class=&quot;headerlink&quot; title=&quot;1. 输入和输出&quot;&gt;&lt;/a&gt;1. 输入和输出&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要使用到input关键字, 从键盘上获取信息赋值</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自制python程序分享</title>
    <link href="http://liangboch.github.io/2024/06/24/python%E8%87%AA%E5%88%B6%E7%A8%8B%E5%BA%8F%E5%88%86%E4%BA%AB/"/>
    <id>http://liangboch.github.io/2024/06/24/python%E8%87%AA%E5%88%B6%E7%A8%8B%E5%BA%8F%E5%88%86%E4%BA%AB/</id>
    <published>2024-06-24T13:10:55.431Z</published>
    <updated>2024-07-01T15:22:57.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本文档将分享一些我自制的小程序-但只会以源码的形式发布-可以点击进行复制"><a href="#本文档将分享一些我自制的小程序-但只会以源码的形式发布-可以点击进行复制" class="headerlink" title="本文档将分享一些我自制的小程序, 但只会以源码的形式发布, 可以点击进行复制"></a>本文档将分享一些我自制的小程序, 但只会以源码的形式发布, 可以点击进行复制</h1><h1 id="密码本"><a href="#密码本" class="headerlink" title="密码本"></a>密码本</h1><p>这个程序方便我们管理自己的各种账户密码</p><p>下方是程序源码, 直接复制即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.ttk <span class="keyword">import</span> Notebook</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 基础参数</span></span><br><span class="line">    root = Tk()</span><br><span class="line">    root.title(<span class="string">&quot;密码本&quot;</span>)</span><br><span class="line">    root.geometry(<span class="string">&quot;420x260&quot;</span>)</span><br><span class="line">    root.resizable(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建选项卡</span></span><br><span class="line">    notebook = Notebook(root)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    page1 = Frame(notebook)</span><br><span class="line">    Label(page1, text=<span class="string">&quot;请在下方输入要录入的信息&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">3</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    Label(page1, text=<span class="string">&quot;项目:&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    program = StringVar()</span><br><span class="line">    program_entry = Entry(page1, textvariable=program)</span><br><span class="line">    program_entry.grid(row=<span class="number">2</span>, column=<span class="number">3</span>, pady=<span class="number">10</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    Label(page1, text=<span class="string">&quot;用户:&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    username = StringVar()</span><br><span class="line">    username_entry = Entry(page1, textvariable=username)</span><br><span class="line">    username_entry.grid(row=<span class="number">3</span>, column=<span class="number">3</span>, pady=<span class="number">10</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    Label(page1, text=<span class="string">&quot;密码:&quot;</span>).grid(row=<span class="number">4</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    password = StringVar()</span><br><span class="line">    password_entry = Entry(page1, textvariable=password)</span><br><span class="line">    password_entry.grid(row=<span class="number">4</span>, column=<span class="number">3</span>, pady=<span class="number">10</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./password.csv&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&#x27;<span class="subst">&#123;program.get()&#125;</span>,<span class="subst">&#123;username.get()&#125;</span>,<span class="subst">&#123;password.get()&#125;</span>\n&#x27;</span>)</span><br><span class="line">            f.close()</span><br><span class="line">        program_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">        username_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">        password_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">        messagebox.showinfo(title=<span class="string">&quot;提示&quot;</span>, message=<span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line">    Button(page1, text=<span class="string">&quot;录入&quot;</span>, command=write).grid(row=<span class="number">5</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">40</span>)</span><br><span class="line">    Button(page1, text=<span class="string">&quot;退出&quot;</span>, command=root.quit).grid(row=<span class="number">5</span>, column=<span class="number">4</span>, pady=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询</span></span><br><span class="line">    page2 = Frame(notebook)</span><br><span class="line">    Label(page2, text=<span class="string">&quot;请输入要查询的项目名称&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">3</span>, pady=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    Label(page2, text=<span class="string">&quot;项目名称:&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    name = StringVar()</span><br><span class="line">    name_entry = Entry(page2, textvariable=name)</span><br><span class="line">    name_entry.grid(row=<span class="number">2</span>, column=<span class="number">3</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    Label(page2, text=<span class="string">&quot;用户名:&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    search_username_entry = Entry(page2)</span><br><span class="line">    search_username_entry.grid(row=<span class="number">3</span>, column=<span class="number">3</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    Label(page2, text=<span class="string">&quot;密码:&quot;</span>).grid(row=<span class="number">4</span>, column=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    search_password_entry = Entry(page2)</span><br><span class="line">    search_password_entry.grid(row=<span class="number">4</span>, column=<span class="number">3</span>, ipadx=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            reader = csv.reader(f)</span><br><span class="line">            rows = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">                <span class="keyword">if</span> name.get() == row[<span class="number">0</span>]:</span><br><span class="line">                    search_username = row[<span class="number">1</span>]</span><br><span class="line">                    search_password = row[<span class="number">2</span>]</span><br><span class="line">                    search_username_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">                    search_password_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">                    search_username_entry.insert(<span class="number">0</span>, search_username)</span><br><span class="line">                    search_password_entry.insert(<span class="number">0</span>, search_password)</span><br><span class="line">                    result = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    search_username_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">                    search_password_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">                    result = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> result == <span class="literal">True</span>:</span><br><span class="line">                Label(page2, text=<span class="string">&quot;查询成功!&quot;</span>).grid(row=<span class="number">5</span>, column=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">elif</span> result == <span class="literal">False</span>:</span><br><span class="line">                Label(page2, text=<span class="string">&quot;未找到对应信息!&quot;</span>).grid(row=<span class="number">5</span>, column=<span class="number">3</span>)</span><br><span class="line">    Button(page2, text=<span class="string">&quot;查询&quot;</span>, command=search).grid(row=<span class="number">6</span>, column=<span class="number">1</span>, padx=<span class="number">3</span>)</span><br><span class="line">    Button(page2, text=<span class="string">&quot;退出&quot;</span>, command=root.quit).grid(row=<span class="number">6</span>, column=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    page3 = Frame(notebook)</span><br><span class="line">    Label(page3, text=<span class="string">&quot;请输入要删除的项目名称&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">3</span>, pady=<span class="number">15</span>)</span><br><span class="line">    Label(page3, text=<span class="string">&quot;项目名称:&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">2</span>)</span><br><span class="line">    delete_name = StringVar()</span><br><span class="line">    delete_name_entry = Entry(page3, textvariable=delete_name)</span><br><span class="line">    delete_name_entry.grid(row=<span class="number">2</span>, column=<span class="number">3</span>, ipadx=<span class="number">70</span>, pady=<span class="number">40</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            reader = csv.reader(f)</span><br><span class="line">            rows = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line">            df = pd.read_csv(<span class="string">&quot;password.csv&quot;</span>)</span><br><span class="line">            df.head(<span class="number">2</span>)</span><br><span class="line">            n = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> delete_name.get() == row[<span class="number">0</span>]:</span><br><span class="line">                    <span class="comment"># 删除行（某个范围）</span></span><br><span class="line">                    df.drop(df.index[n - <span class="number">1</span>:n], inplace=<span class="literal">True</span>)</span><br><span class="line">                    <span class="comment"># 如果想要保存新的csv文件，则为</span></span><br><span class="line">                    df.to_csv(<span class="string">&quot;password.csv&quot;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">                    result = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> result == <span class="literal">True</span>:</span><br><span class="line">                delete_name_entry.delete(<span class="number">0</span>, tk.END)</span><br><span class="line">                Label(page3, text=<span class="string">&quot;删除成功!&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">elif</span> result == <span class="literal">False</span>:</span><br><span class="line">                Label(page3, text=<span class="string">&quot;未找到对应信息!&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Button(page3, text=<span class="string">&quot;删除&quot;</span>, command=delete).grid(row=<span class="number">4</span>, column=<span class="number">1</span>, padx=<span class="number">3</span>, pady=<span class="number">30</span>)</span><br><span class="line">    Button(page3, text=<span class="string">&quot;退出&quot;</span>, command=root.quit).grid(row=<span class="number">4</span>, column=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加选项卡</span></span><br><span class="line">    notebook.grid()</span><br><span class="line">    notebook.add(page1, text=<span class="string">&quot;录入&quot;</span>)</span><br><span class="line">    notebook.add(page2, text=<span class="string">&quot;查询&quot;</span>)</span><br><span class="line">    notebook.add(page3, text=<span class="string">&quot;删除&quot;</span>)</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="爱心"><a href="#爱心" class="headerlink" title="爱心"></a>爱心</h1><p>这个程序可以用来向自己心仪的女生表白</p><p>下方是程序源代码, 直接复制即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin, cos, pi, log</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">CANVAS_WIDTH = <span class="number">640</span>  <span class="comment"># 画布的宽</span></span><br><span class="line">CANVAS_HEIGHT = <span class="number">480</span>  <span class="comment"># 画布的高</span></span><br><span class="line">CANVAS_CENTER_X = CANVAS_WIDTH / <span class="number">2</span>  <span class="comment"># 画布中心的X轴坐标</span></span><br><span class="line">CANVAS_CENTER_Y = CANVAS_HEIGHT / <span class="number">2</span>  <span class="comment"># 画布中心的Y轴坐标</span></span><br><span class="line">IMAGE_ENLARGE = <span class="number">11</span>  <span class="comment"># 放大比例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heart_function</span>(<span class="params">t, shrink_ratio: <span class="built_in">float</span> = IMAGE_ENLARGE</span>):</span><br><span class="line">    <span class="comment"># 基础函数</span></span><br><span class="line">    x = <span class="number">16</span> * (sin(t) ** <span class="number">3</span>)</span><br><span class="line">    y = -(<span class="number">13</span> * cos(t) - <span class="number">5</span> * cos(<span class="number">2</span> * t) - <span class="number">2</span> * cos(<span class="number">3</span> * t) - cos(<span class="number">4</span> * t))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放大</span></span><br><span class="line">    x *= shrink_ratio</span><br><span class="line">    y *= shrink_ratio</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移到画布中央</span></span><br><span class="line">    x += CANVAS_CENTER_X</span><br><span class="line">    y += CANVAS_CENTER_Y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(x), <span class="built_in">int</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scatter_inside</span>(<span class="params">x, y, beta=<span class="number">0.15</span></span>):</span><br><span class="line">    ratio_x = - beta * log(random.random())</span><br><span class="line">    ratio_y = - beta * log(random.random())</span><br><span class="line">    dx = ratio_x * (x - CANVAS_CENTER_X)</span><br><span class="line">    dy = ratio_y * (y - CANVAS_CENTER_Y)</span><br><span class="line">    <span class="keyword">return</span> x - dx, y - dy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrink</span>(<span class="params">x, y, ratio</span>):</span><br><span class="line">    force = -<span class="number">1</span> / (((x - CANVAS_CENTER_X) ** <span class="number">2</span> + (y - CANVAS_CENTER_Y) ** <span class="number">2</span>) ** <span class="number">0.6</span>)  <span class="comment"># 这个参数...</span></span><br><span class="line">    dx = ratio * force * (x - CANVAS_CENTER_X)</span><br><span class="line">    dy = ratio * force * (y - CANVAS_CENTER_Y)</span><br><span class="line">    <span class="keyword">return</span> x - dx, y - dy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curve</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span> * (<span class="number">2</span> * sin(<span class="number">4</span> * p)) / (<span class="number">2</span> * pi)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Heart</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, generate_frame=<span class="number">20</span></span>):</span><br><span class="line">        self._points = <span class="built_in">set</span>()  <span class="comment"># 原始爱心坐标集合</span></span><br><span class="line">        self._edge_diffusion_points = <span class="built_in">set</span>()  <span class="comment"># 边缘扩散效果点坐标集合</span></span><br><span class="line">        self._center_diffusion_points = <span class="built_in">set</span>()  <span class="comment"># 中心扩散效果点坐标集合</span></span><br><span class="line">        self.all_points = &#123;&#125;  <span class="comment"># 每帧动态点坐标</span></span><br><span class="line">        self.build(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">        self.random_halo = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        self.generate_frame = generate_frame</span><br><span class="line">        <span class="keyword">for</span> frame <span class="keyword">in</span> <span class="built_in">range</span>(generate_frame):</span><br><span class="line">            self.calc(frame)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="comment"># 爱心</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(number):</span><br><span class="line">            t = random.uniform(<span class="number">0</span>, <span class="number">2</span> * pi)  <span class="comment"># 随机不到的地方造成爱心有缺口</span></span><br><span class="line">            x, y = heart_function(t)</span><br><span class="line">            self._points.add((x, y))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 爱心内扩散</span></span><br><span class="line">        <span class="keyword">for</span> _x, _y <span class="keyword">in</span> <span class="built_in">list</span>(self._points):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                x, y = scatter_inside(_x, _y, <span class="number">0.05</span>)</span><br><span class="line">                self._edge_diffusion_points.add((x, y))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 爱心内再次扩散</span></span><br><span class="line">        point_list = <span class="built_in">list</span>(self._points)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):</span><br><span class="line">            x, y = random.choice(point_list)</span><br><span class="line">            x, y = scatter_inside(x, y, <span class="number">0.17</span>)</span><br><span class="line">            self._center_diffusion_points.add((x, y))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_position</span>(<span class="params">x, y, ratio</span>):</span><br><span class="line">        <span class="comment"># 调整缩放比例</span></span><br><span class="line">        force = <span class="number">1</span> / (((x - CANVAS_CENTER_X) ** <span class="number">2</span> + (y - CANVAS_CENTER_Y) ** <span class="number">2</span>) ** <span class="number">0.520</span>)</span><br><span class="line"></span><br><span class="line">        dx = ratio * force * (x - CANVAS_CENTER_X) + random.randint(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        dy = ratio * force * (y - CANVAS_CENTER_Y) + random.randint(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x - dx, y - dy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">self, generate_frame</span>):</span><br><span class="line">        ratio = <span class="number">10</span> * curve(generate_frame / <span class="number">10</span> * pi)  <span class="comment"># 圆滑的周期的缩放比例</span></span><br><span class="line"></span><br><span class="line">        halo_radius = <span class="built_in">int</span>(<span class="number">4</span> + <span class="number">6</span> * (<span class="number">1</span> + curve(generate_frame / <span class="number">10</span> * pi)))</span><br><span class="line">        halo_number = <span class="built_in">int</span>(<span class="number">3000</span> + <span class="number">4000</span> * <span class="built_in">abs</span>(curve(generate_frame / <span class="number">10</span> * pi) ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        all_points = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 光环</span></span><br><span class="line">        heart_halo_point = <span class="built_in">set</span>()  <span class="comment"># 光环的点坐标集合</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(halo_number):</span><br><span class="line">            t = random.uniform(<span class="number">0</span>, <span class="number">2</span> * pi)  <span class="comment"># 随机不到的地方造成爱心有缺口</span></span><br><span class="line">            x, y = heart_function(t, shrink_ratio=<span class="number">11</span>)</span><br><span class="line">            x, y = shrink(x, y, halo_radius)</span><br><span class="line">            <span class="keyword">if</span> (x, y) <span class="keyword">not</span> <span class="keyword">in</span> heart_halo_point:</span><br><span class="line">                <span class="comment"># 处理新的点</span></span><br><span class="line">                heart_halo_point.add((x, y))</span><br><span class="line">                x += random.randint(-<span class="number">11</span>, <span class="number">11</span>)</span><br><span class="line">                y += random.randint(-<span class="number">11</span>, <span class="number">11</span>)</span><br><span class="line">                size = random.choice((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>))  <span class="comment"># 控制外围粒子的大小</span></span><br><span class="line">                all_points.append((x, y, size))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 轮廓</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> self._points:</span><br><span class="line">            x, y = self.calc_position(x, y, ratio)</span><br><span class="line">            size = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">            all_points.append((x, y, size))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 内容</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> self._center_diffusion_points:</span><br><span class="line">            x, y = self.calc_position(x, y, ratio)</span><br><span class="line">            size = random.randint(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">            all_points.append((x, y, size))</span><br><span class="line"></span><br><span class="line">        self.all_points[generate_frame] = all_points</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">self, render_canvas, render_frame</span>):</span><br><span class="line">        <span class="keyword">for</span> x, y, size <span class="keyword">in</span> self.all_points[render_frame % self.generate_frame]:</span><br><span class="line">            render_canvas.create_rectangle(x, y, x + size, y + size, width=<span class="number">0</span>, fill=HEART_COLOR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">main: Tk, render_canvas: Canvas, render_heart: Heart, render_frame=<span class="number">0</span></span>):</span><br><span class="line">    render_canvas.delete(<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line">    render_heart.render(render_canvas, render_frame)</span><br><span class="line">    main.after(<span class="number">160</span>, draw, main, render_canvas, render_heart, render_frame + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root = Tk()  <span class="comment"># 一个Tk</span></span><br><span class="line">    bgcolor = <span class="string">&#x27;black&#x27;</span> <span class="comment"># 背景颜色</span></span><br><span class="line">    HEART_COLOR = <span class="string">&quot;pink&quot;</span>  <span class="comment"># 心的颜色</span></span><br><span class="line">    canvas = Canvas(root, bg=bgcolor, height=CANVAS_HEIGHT, width=CANVAS_WIDTH)</span><br><span class="line">    canvas.pack()</span><br><span class="line">    heart = Heart()  <span class="comment"># 心</span></span><br><span class="line">    draw(root, canvas, heart)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本文档将分享一些我自制的小程序-但只会以源码的形式发布-可以点击进行复制&quot;&gt;&lt;a href=&quot;#本文档将分享一些我自制的小程序-但只会以源码的形式发布-可以点击进行复制&quot; class=&quot;headerlink&quot; title=&quot;本文档将分享一些我自制的小程序, 但只会</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://liangboch.github.io/2024/06/23/%E7%88%AC%E8%99%AB/"/>
    <id>http://liangboch.github.io/2024/06/23/%E7%88%AC%E8%99%AB/</id>
    <published>2024-06-22T23:11:37.600Z</published>
    <updated>2024-07-01T15:23:10.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫的分类"><a href="#爬虫的分类" class="headerlink" title="爬虫的分类"></a>爬虫的分类</h1><p>四大类</p><ol><li>聚焦爬虫:完成某一特定数据的采集</li><li>通用爬虫:将所有的内容都去获取采集, 都存下来</li><li>增量爬虫:既可以是聚焦爬虫, 也可以是通用爬虫, 当数据变化时, 可以在原有的基础上增加内容</li><li>暗网&#x2F;深网爬虫:很少见, 且暗网&#x2F;深网本身就是违法的, 见不得光的, 既可以是聚焦爬虫, 也可以是通用爬虫, 同时又可以是增量爬虫</li></ol><h1 id="合法爬虫"><a href="#合法爬虫" class="headerlink" title="合法爬虫"></a>合法爬虫</h1><p>要想合法爬虫就需要遵守网络协议</p><h2 id="1-机器人协议"><a href="#1-机器人协议" class="headerlink" title="1.机器人协议"></a>1.机器人协议</h2><p>​需要遵守网站相对应的robots(机器人)协议, 其中有详细描述什么可以爬或不可以爬</p><p>​如想查看网站的robots协议, 可以在网站主页的URL后添加<code>/robots.txt</code></p><p>​国内比较顶级的购物网站都没有写robots协议</p><h2 id="2-君子协议"><a href="#2-君子协议" class="headerlink" title="2.君子协议"></a>2.君子协议</h2><p>未标注是否可以爬虫, 但不可以使被爬的网站的正常运行,</p><h2 id="写爬虫的注意事项"><a href="#写爬虫的注意事项" class="headerlink" title="写爬虫的注意事项"></a>写爬虫的注意事项</h2><ol><li>要给服务器留活路, 在爬虫开启后, 使用其他设备尝试访问, 尝试是否可以正常或快速访问</li><li>脱离敏感数据, 不要爬取个人信息 账号密码等信息</li><li>不要公开收费做爬虫</li><li>不要爬取国家的公共资源网站</li></ol><h1 id="爬虫如何获取收益"><a href="#爬虫如何获取收益" class="headerlink" title="爬虫如何获取收益"></a>爬虫如何获取收益</h1><ol><li><p>入职企业, 入职爬虫工程师</p></li><li><p>抢购:使用爬虫抢购商品, 或去各种平台找秒杀价的商品, 并转手卖出, 中间商赚差价</p></li><li><p>羊毛出自猪身上:将网站上的内容爬取下来, 将这些内容放置于自己制作的Web网站或者APP上, 通过投放的效果来获取广告上的费用, 当我们点击广告时就会涉及到转化率的问题, 每个商家的转化率不一样, 我们所获取的收益也将会不同</p></li><li><p>引流比价:通过爬取同一商品的所有价格, 获取价格的变动, 将价格进行对比, 帮助商家引流, 在商家同意的情况下, 商家会给予我们报酬</p></li><li><p>点赞, 收藏, 刷粉丝, 刷评论, 刷播放量:通过爬虫, 登录指定的账号, 去干一些指定的事, </p><p>或者寻找需要的人刷粉丝, 我们会从中相应的刷粉丝的费用</p></li></ol><p>以上的本质是资源的整合, 需要找到或接触到客户需要的内容, 了解客户的需求, 帮助客户解决问题</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;爬虫的分类&quot;&gt;&lt;a href=&quot;#爬虫的分类&quot; class=&quot;headerlink&quot; title=&quot;爬虫的分类&quot;&gt;&lt;/a&gt;爬虫的分类&lt;/h1&gt;&lt;p&gt;四大类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;聚焦爬虫:完成某一特定数据的采集&lt;/li&gt;
&lt;li&gt;通用爬虫:将所有的内容都去获取</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++基础</title>
    <link href="http://liangboch.github.io/2024/06/14/C++%E5%9F%BA%E7%A1%80/"/>
    <id>http://liangboch.github.io/2024/06/14/C++%E5%9F%BA%E7%A1%80/</id>
    <published>2024-06-14T14:16:00.342Z</published>
    <updated>2024-07-01T15:22:34.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-基础知识"><a href="#一-基础知识" class="headerlink" title="一. 基础知识"></a>一. 基础知识</h1><h2 id="1-文字的输入与输出"><a href="#1-文字的输入与输出" class="headerlink" title="1. 文字的输入与输出"></a>1. 文字的输入与输出</h2><ul><li>输入</li></ul><p>相当于从键盘上获取信息赋值给一个容器</p><p>代码示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    数据类型 变量名;</span><br><span class="line">    cin &gt;&gt; 变量名;</span><br><span class="line">    cout &lt;&lt; 变量名 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><p>可以在控制台显示变量的值或文字, 数字等信息</p><p>代码示例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输出的内容&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2. 注释"></a>2. 注释</h2><p>作用:在代码中加一些说明和解释, 方便自己或其他程序员阅读代码</p><p>两种注释:</p><ul><li>单行注释 <code>// 描述信息</code></li></ul><p>​通常放在一行代码的上方, 或者一条语句的末尾, 对该行代码说明</p><ul><li>多行注释 <code>/*描述信息*/</code></li></ul><p>​通常放在一段代码上方, 对该段代码做整体解释</p><p>​<code>提示:编译器在编译代码时, 会忽略注释内容</code></p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><p>作用:给一段指定的内存空间起名, 方便操作和段内存</p><p>语法:<code>数据类型 变量名 = 初始值</code></p><h2 id="4-常量"><a href="#4-常量" class="headerlink" title="4. 常量"></a>4. 常量</h2><p>作用:用于记录不可更改的值</p><p>定义方式:</p><p>​1.  #define宏常量:<code>#define 常量名 常量值</code></p><p>​通常在文件上方定义, 表示一个常量</p><p>​2.  const修饰的变量:<code>const 数据类型 常量名 = 常量值</code></p><p>​通常在变量定义前加关键字const, 修饰该变量为常量, 不可修改</p><h2 id="5-关键字"><a href="#5-关键字" class="headerlink" title="5. 关键字"></a>5. 关键字</h2><p>作用:关键字是C++预先保留的单词(标识符)</p><p>​在定义变量或者常量时, 不要用关键字</p><p>C++保留字如下:</p><table><thead><tr><th align="center">asm</th><th align="center">do</th><th align="center">if</th><th align="center">return</th><th align="center">typedef</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">double</td><td align="center">inline</td><td align="center">short</td><td align="center">typeid</td></tr><tr><td align="center">bool</td><td align="center">dynamic_cast</td><td align="center">int</td><td align="center">signed</td><td align="center">typename</td></tr><tr><td align="center">break</td><td align="center">else</td><td align="center">long</td><td align="center">sizeof</td><td align="center">union</td></tr><tr><td align="center">case</td><td align="center">enum</td><td align="center">mutable</td><td align="center">static</td><td align="center">unsighed</td></tr><tr><td align="center">catch</td><td align="center">explicit</td><td align="center">namespace</td><td align="center">static_cast</td><td align="center">using</td></tr><tr><td align="center">char</td><td align="center">export</td><td align="center">new</td><td align="center">struct</td><td align="center">virtual</td></tr><tr><td align="center">class</td><td align="center">extern</td><td align="center">operator</td><td align="center">switch</td><td align="center">void</td></tr><tr><td align="center">const</td><td align="center">false</td><td align="center">private</td><td align="center">template</td><td align="center">volatile</td></tr><tr><td align="center">const_cast</td><td align="center">float</td><td align="center">protected</td><td align="center">this</td><td align="center">wchar_t</td></tr><tr><td align="center">continue</td><td align="center">for</td><td align="center">public</td><td align="center">throw</td><td align="center">while</td></tr><tr><td align="center">default</td><td align="center">friend</td><td align="center">register</td><td align="center">true</td><td align="center">try</td></tr><tr><td align="center">delete</td><td align="center">goto</td><td align="center">reinterpret_cast</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><code>提示:在给变量或者常量起名称的时候, 不要用C++的关键字, 否则会产生歧义</code></p><h2 id="6-标识符命名规则"><a href="#6-标识符命名规则" class="headerlink" title="6. 标识符命名规则"></a>6. 标识符命名规则</h2><p>作用:C++规定给标识符(变量, 常量)命名时, 有一套自己的规则</p><p>​1. 标识符不能是关键字</p><p>​2. 标识符只能由字母, 数字, 下划线组成</p><p>​3. 第一个字符必须为字母或下划线</p><p>​4. 标识符中字母区分大小写</p><p><code>建议:给标识符命名时, 争取做到见名知意的效果,方便自己和他人的阅读</code></p><h1 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二. 数据类型"></a>二. 数据类型</h1><p>C++规定在创建一个变量或者常量时, 必须要指定出相应的数据类型, 否则无法给变量或者常量分配内存</p><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1. 整型"></a>1. 整型</h2><p>作用:整型变量表示的是整数类型的数据</p><p>C++中能够表示整数类型有以下几种方式, 区别在于所占内存空间不同:</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>-32768 到 32767</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>long(长整型)</td><td>Windows为4字节, Linux为4字节(32位), 8字节(64位)</td><td>-2147483648 到 2147483647</td></tr><tr><td>long long(长长整型)</td><td>8字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr></tbody></table><h2 id="2-sizeof关键字"><a href="#2-sizeof关键字" class="headerlink" title="2. sizeof关键字"></a>2. sizeof关键字</h2><p>作用:利用sizeof关键字可以统计数据类型所占内存大小</p><p>语法:<code>sizeof(数据类型/变量)</code></p><p>整型结论:short &lt; int &lt;&#x3D; long &lt;&#x3D; long long</p><h2 id="3-浮点型"><a href="#3-浮点型" class="headerlink" title="3. 浮点型"></a>3. 浮点型</h2><p>作用:用于表示小数</p><p>浮点型变量分为两种:</p><p>​1. 单精度float</p><p>​2. 双精度double</p><p>两者的区别在于表示的有效数字范围不同</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15到16位有效数字</td></tr></tbody></table><p>注意:1. 浮点型中的有效数字范围包括小数点以前和小数点以后的;</p><p>​ 2. 在定义float时是从double转换成float的, 还需要在附的值的后面再加上一个f</p><p>​ 3. 默认情况下输出一个小数, 会显示六位有效数字</p><p>提示:科学计数法在C++中同样适用, 表示为<code>aeb</code>, 相当于a乘以10的b次方</p><h2 id="4-字符型"><a href="#4-字符型" class="headerlink" title="4. 字符型"></a>4. 字符型</h2><p>作用:字符型变量用于显示单个字符</p><p>语法:<code>char 变量名 = &#39;字符&#39;</code></p><p>​<code>char 变量名 = &quot;字符串&quot; </code></p><p>注意:1. 在显示字符型变量时, 用单引号将字符括起来, 不要用双引号</p><p>​ 2. 单引号内只能有一个字符, 不可以是字符串</p><p>C和C++中的字符型变量只占用1字节</p><p>字符型变量并不是把字符本身放在内存中存储, 而是将对应的ASCII编码放入到存储单元</p><p>ASCII码大致由以下两部分组成:</p><p>​1.  ASCII非打印控制字符:ASCII表上的数字0-31分配给了控制字符, 用于控制像打印机等一些外围设备</p><p>​    2.  ASCII打印字符: 数字32-126分配给了能在键盘上找到的字符, 当查看或打印文档时就会出现</p><h2 id="5-转义字符"><a href="#5-转义字符" class="headerlink" title="5. 转义字符"></a>5. 转义字符</h2><p>作用:用于表示一些不能显示出来的ASCII字符</p><p>现阶段我们常用的转义字符有:<code>\n, \\, \t</code></p><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值(十进制)</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS), 将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF) , 将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF), 将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR), 将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT), 跳到下一个TAB位置</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜杠字符”\“</td><td>092</td></tr><tr><td>\‘</td><td>代表一个单引号(撇号)字符</td><td>039</td></tr><tr><td>\“</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符, d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符, h范围0<del>9</del>, <del>a</del>f, A~F</td><td>3位16进制</td></tr></tbody></table><h2 id="6-字符串型"><a href="#6-字符串型" class="headerlink" title="6. 字符串型"></a>6. 字符串型</h2><p>作用:用于表示一串字符</p><p>两种风格:</p><p>​1. C语言风格:<code>char 变量名[] = &quot;字符串值&quot;</code></p><p>​2. C++风格:<code>string 变量名 = &quot;字符串值&quot;</code></p><p>​注意:在使用string类型时在有的版本需要引用<string>头文件</p><h2 id="7-布尔型"><a href="#7-布尔型" class="headerlink" title="7. 布尔型"></a>7. 布尔型</h2><p>作用:布尔数据类型代表真或假的值</p><p>bool类型只有两个值:</p><p>​1. true—真(本质是1)</p><p>​2. false—假(本质是0)</p><p>bool类型占1字节大小</p><h2 id="8-数据的输入"><a href="#8-数据的输入" class="headerlink" title="8. 数据的输入"></a>8. 数据的输入</h2><p>作用:用于从键盘获取数据</p><p>关键字:cin</p><p>语法:<code>cin &gt;&gt; 变量名</code></p><p>​注意:此处的变量名需要提前定义其数据类型, 且输入的内容必须和定义的数据类型相符合</p><h1 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三. 运算符"></a>三. 运算符</h1><p>作用:用于执行代码的运算</p><p>常见的运算符:</p><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较, 并返回一个真值(true)或假值(false)</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值(true)或假值(false)</td></tr></tbody></table><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><p>作用:用于处理四则运算</p><p>算术运算符包括以下符号:</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10+5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10-5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10*5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10&#x2F;2</td><td>5</td></tr><tr><td>%</td><td>取模(取余)</td><td>10%3</td><td>1</td></tr><tr><td>++</td><td>前置递增</td><td>a&#x3D;2;b&#x3D;++a;</td><td>a&#x3D;3;b&#x3D;3;</td></tr><tr><td>++</td><td>后置递增</td><td>a&#x3D;2;b&#x3D;a++;</td><td>a&#x3D;3;b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2;b&#x3D;–a;</td><td>a&#x3D;1;b&#x3D;1;</td></tr><tr><td>–</td><td>后置递减</td><td>a&#x3D;2;b&#x3D;a–;</td><td>a&#x3D;1;b&#x3D;2;</td></tr></tbody></table><p>注意: 1. 除法和取模运算时, 除数不能为0</p><ol start="2"><li>两个小数不能进行取模运算</li></ol><p>前置运算和后置运算的区别:</p><ol><li>前置运算是先对原变量进行+1或-1, 然后再将原变量的值赋给另一个变量</li><li>后置运算是先将变量的原数值赋值给另一个变量, 再对原变量进行+1或-1</li></ol><h2 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h2><p>作用:用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号:</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; b-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%&#x3D;2;</td><td>a&#x3D;1;</td></tr></tbody></table><p>赋值运算符是将变量进行运算后, 再将运算的结果赋值给原变量</p><h2 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3. 比较运算符"></a>3. 比较运算符</h2><p>作用:用于表达式的比较, 并返回一个真值或假值</p><p>比较运算符有以下几种:</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><p>比较运算符是判断两个变量之间是否成立特定关系, 如果成立则是true(1), 反之如果不成立则是false(0)</p><p>注意:比较运算符在比较时最好使用小括号将比较表达式括起来</p><h2 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h2><p>作用:用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号:</p><table><thead><tr><th>运算符</th><th>术语</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假, 则!a为真; 如果a为真, 则!a为假</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真, 则结果为真, 否则为假</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真, 则结果为真, 二者都为假时, 结果为假</td></tr></tbody></table><p>注意:在c++中 , 除了0, 任何结果都为真</p><p>逻辑运算符总结: </p><ol><li>非:假变真, 真变假</li><li>与:同真为真, 否则为假</li><li>或:同假为假, 其余为真</li></ol><h1 id="四-程序流程结构"><a href="#四-程序流程结构" class="headerlink" title="四. 程序流程结构"></a>四. 程序流程结构</h1><p>C&#x2F;C++支持最基础的三种程序运行结构:顺序结构, 选择结构, 循环结构</p><ul><li>顺序结构:程序按顺序执行, 不发生跳转</li><li>选择结构:依照条件是否满足, 有选择的执行相应功能</li><li>循环结构:依照条件是否满足, 循环多次执行某段代码</li></ul><h2 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1. 选择结构"></a>1. 选择结构</h2><h3 id="1-if条件语句"><a href="#1-if条件语句" class="headerlink" title="1. if条件语句"></a>1. if条件语句</h3><p>作用:执行满足条件的语句</p><p>if语句的三种形式:</p><ul><li>单行格式if语句</li><li>多行格式if语句</li><li>多条件的if语句</li></ul><p>语法:</p><ol><li>单行格式if语句:<code>if(条件)&#123;条件满足时执行的语句&#125;</code></li><li>多行格式if语句:<code>if(条件)&#123;条件满足时执行的语句&#125;else&#123;条件不满足时执行的语句&#125;</code></li><li>多条件的if语句:<code>if(条件1)&#123;条件1满足时执行的语句&#125;else if(条件2)&#123;条件2满足时执行的语句&#125;...else&#123;条件都不满足时执行的语句&#125;</code></li></ol><p>嵌套if语句:在if语句中, 可以嵌套使用if语句, 达到更精确的条件判断</p><h3 id="2-三目运算符"><a href="#2-三目运算符" class="headerlink" title="2. 三目运算符"></a>2. 三目运算符</h3><p>作用:通过三目运算符实现简单的判断</p><p>语法:<code>表达式1 ? 表达式2 : 表达式3</code></p><p>解释:</p><ul><li>如果表达式1的值为真, 执行表达式2, 并返回表达式2的结果</li><li>如果表达式1的值为假, 执行表达式3, 并返回表达式3的结果</li><li>注意:表达式2和表达式3也可以是变量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-基础知识&quot;&gt;&lt;a href=&quot;#一-基础知识&quot; class=&quot;headerlink&quot; title=&quot;一. 基础知识&quot;&gt;&lt;/a&gt;一. 基础知识&lt;/h1&gt;&lt;h2 id=&quot;1-文字的输入与输出&quot;&gt;&lt;a href=&quot;#1-文字的输入与输出&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
</feed>
